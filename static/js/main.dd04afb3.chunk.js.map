{"version":3,"sources":["resources/cottagecloudclip.mp4","resources/cvgsclip.mp4","resources/resume.pdf","resources/profile.jpg","components/CottageCloudClip.js","components/CVGSClip.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CottageCloudClip","src","cottagecloudclip","autoPlay","loop","controls","className","Component","CVGSClip","cvgsclip","App","id","href","Resume","Profile","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2MCoB5BC,E,uKAdX,OACE,6BACE,gEACA,2BAAOC,IAAKC,IAAkBC,UAAQ,EAACC,MAAI,EAACC,UAAQ,IACpD,qKAGA,uBAAGC,UAAU,QAAb,gE,GATuBC,a,gBCchBC,E,uKAZX,OACE,6BACE,wDACA,2BAAOP,IAAKQ,IAAUN,UAAQ,EAACC,MAAI,EAACC,UAAQ,IAC5C,6JAEA,uBAAGC,UAAU,QAAb,2C,GAReC,a,iCC6CRG,MA1Cf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKK,GAAG,UACN,8CACA,uBAAGA,GAAG,SACJ,uBAAGC,KAAK,6CAAR,YADF,WAGE,uBAAGA,KAAK,gCAAR,UAHF,WAKE,uBAAGA,KAAMC,KAAT,UALF,WAOE,uBAAGD,KAAK,8BAAR,YAKN,yBAAKN,UAAU,YACb,yBAAKK,GAAG,QAAQL,UAAU,YACxB,wCACA,yBAAKL,IAAKa,MACV,4MAGF,yBAAKH,GAAG,WAAWL,UAAU,YAC3B,wCACA,yBAAKA,UAAU,eACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,eACb,kBAAC,EAAD,SAIN,4BAAQA,UAAU,cAAlB,wCC9BcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd04afb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cottagecloudclip.1ff62e2d.mp4\";","module.exports = __webpack_public_path__ + \"static/media/cvgsclip.481ca5d8.mp4\";","module.exports = __webpack_public_path__ + \"static/media/resume.c1901005.pdf\";","module.exports = __webpack_public_path__ + \"static/media/profile.5fbed178.jpg\";","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport cottagecloudclip from \"../resources/cottagecloudclip.mp4\";\r\n\r\nclass CottageCloudClip extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Property Rental Platform Project</h2>\r\n        <video src={cottagecloudclip} autoPlay loop controls />\r\n        <p>REST API and web front-end for viewing\r\n        and renting vacation properties. Cooperative semester-long\r\n        project with two other team members.</p>\r\n        <p className=\"bold\">Stack: React + React-Admin, Node.js +\r\n         Loopback, MongoDB</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CottageCloudClip;","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport cvgsclip from \"../resources/cvgsclip.mp4\";\r\n\r\nclass CVGSClip extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Video Game Store Project</h2>\r\n        <video src={cvgsclip} autoPlay loop controls />\r\n        <p>ASP.NET Core MVC web app for viewing/purchasing games online.\r\n        Cooperative semester-long project with three other team members.</p>\r\n        <p className=\"bold\">Stack: ASP.NET Core, Razor, SQLite</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CVGSClip;","import React from 'react';\r\nimport './App.css';\r\nimport CottageCloudClip from \"./components/CottageCloudClip.js\";\r\nimport CVGSClip from './components/CVGSClip';\r\nimport Resume from './resources/resume.pdf';\r\nimport Profile from './resources/profile.jpg';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div id=\"header\">\r\n          <h1>Jakob Chisholm</h1>\r\n          <p id=\"links\">\r\n            <a href=\"https://www.linkedin.com/in/jakobchisholm\">Linkedin</a>\r\n            &nbsp;&nbsp;\r\n            <a href=\"https://github.com/jakobchis\">Github</a>\r\n            &nbsp;&nbsp;\r\n            <a href={Resume}>Resume</a>\r\n            &nbsp;&nbsp;\r\n            <a href=\"mailto:jakobchis@gmail.com\">Email</a>\r\n          </p>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"App-body\">\r\n        <div id=\"about\" className=\"body-div\">\r\n          <h1>About Me</h1>\r\n          <img src={Profile}></img>\r\n          <p>Hi, I'm Jakob. I'm a full stack developer in the Guelph/KW area and a recent Conestoga College grad. I'm passionate about software, love experimentation, and love learning.</p>\r\n        </div>\r\n\r\n        <div id=\"projects\" className=\"body-div\">\r\n          <h1>Projects</h1>\r\n          <div className=\"project-div\">\r\n            <CottageCloudClip />\r\n          </div>\r\n          <div className=\"project-div\">\r\n            <CVGSClip />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer className=\"App-footer\">\r\n        Copyright &copy; Jakob Chisholm 2020\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}